"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterOldTransactions = filterOldTransactions;
exports.fixInstallments = fixInstallments;
exports.sortTransactionsByDate = sortTransactionsByDate;
var _lodash = _interopRequireDefault(require("lodash"));
var _moment = _interopRequireDefault(require("moment"));
var _transactions = require("../transactions");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function isNormalTransaction(txn) {
  return txn && txn.type === _transactions.TransactionTypes.Normal;
}
function isInstallmentTransaction(txn) {
  return txn && txn.type === _transactions.TransactionTypes.Installments;
}
function isNonInitialInstallmentTransaction(txn) {
  return isInstallmentTransaction(txn) && !!txn.installments && txn.installments.number > 1;
}
function isInitialInstallmentTransaction(txn) {
  return isInstallmentTransaction(txn) && !!txn.installments && txn.installments.number === 1;
}
function fixInstallments(txns) {
  return txns.map(txn => {
    const clonedTxn = _objectSpread({}, txn);
    if (isInstallmentTransaction(clonedTxn) && isNonInitialInstallmentTransaction(clonedTxn) && clonedTxn.installments) {
      const dateMoment = (0, _moment.default)(clonedTxn.date);
      const actualDateMoment = dateMoment.add(clonedTxn.installments.number - 1, 'month');
      clonedTxn.date = actualDateMoment.toISOString();
    }
    return clonedTxn;
  });
}
function sortTransactionsByDate(txns) {
  return _lodash.default.sortBy(txns, ['date']);
}
function filterOldTransactions(txns, startMoment, combineInstallments) {
  return txns.filter(txn => {
    const combineNeededAndInitialOrNormal = combineInstallments && (isNormalTransaction(txn) || isInitialInstallmentTransaction(txn));
    return !combineInstallments && startMoment.isSameOrBefore(txn.date) || combineNeededAndInitialOrNormal && startMoment.isSameOrBefore(txn.date);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbW9tZW50IiwiX3RyYW5zYWN0aW9ucyIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm93bktleXMiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5IiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImkiLCJfdG9QcmltaXRpdmUiLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJpc05vcm1hbFRyYW5zYWN0aW9uIiwidHhuIiwidHlwZSIsIlRyYW5zYWN0aW9uVHlwZXMiLCJOb3JtYWwiLCJpc0luc3RhbGxtZW50VHJhbnNhY3Rpb24iLCJJbnN0YWxsbWVudHMiLCJpc05vbkluaXRpYWxJbnN0YWxsbWVudFRyYW5zYWN0aW9uIiwiaW5zdGFsbG1lbnRzIiwibnVtYmVyIiwiaXNJbml0aWFsSW5zdGFsbG1lbnRUcmFuc2FjdGlvbiIsImZpeEluc3RhbGxtZW50cyIsInR4bnMiLCJtYXAiLCJjbG9uZWRUeG4iLCJkYXRlTW9tZW50IiwibW9tZW50IiwiZGF0ZSIsImFjdHVhbERhdGVNb21lbnQiLCJhZGQiLCJ0b0lTT1N0cmluZyIsInNvcnRUcmFuc2FjdGlvbnNCeURhdGUiLCJfIiwic29ydEJ5IiwiZmlsdGVyT2xkVHJhbnNhY3Rpb25zIiwic3RhcnRNb21lbnQiLCJjb21iaW5lSW5zdGFsbG1lbnRzIiwiY29tYmluZU5lZWRlZEFuZEluaXRpYWxPck5vcm1hbCIsImlzU2FtZU9yQmVmb3JlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvdHJhbnNhY3Rpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbW9tZW50LCB7IHR5cGUgTW9tZW50IH0gZnJvbSAnbW9tZW50JztcbmltcG9ydCB7XG4gIFRyYW5zYWN0aW9uVHlwZXMsXG4gIHR5cGUgVHJhbnNhY3Rpb24sXG59IGZyb20gJy4uL3RyYW5zYWN0aW9ucyc7XG5cbmZ1bmN0aW9uIGlzTm9ybWFsVHJhbnNhY3Rpb24odHhuOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIHR4biAmJiB0eG4udHlwZSA9PT0gVHJhbnNhY3Rpb25UeXBlcy5Ob3JtYWw7XG59XG5cbmZ1bmN0aW9uIGlzSW5zdGFsbG1lbnRUcmFuc2FjdGlvbih0eG46IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gdHhuICYmIHR4bi50eXBlID09PSBUcmFuc2FjdGlvblR5cGVzLkluc3RhbGxtZW50cztcbn1cblxuZnVuY3Rpb24gaXNOb25Jbml0aWFsSW5zdGFsbG1lbnRUcmFuc2FjdGlvbih0eG46IFRyYW5zYWN0aW9uKTogYm9vbGVhbiB7XG4gIHJldHVybiBpc0luc3RhbGxtZW50VHJhbnNhY3Rpb24odHhuKSAmJiAhIXR4bi5pbnN0YWxsbWVudHMgJiYgdHhuLmluc3RhbGxtZW50cy5udW1iZXIgPiAxO1xufVxuXG5mdW5jdGlvbiBpc0luaXRpYWxJbnN0YWxsbWVudFRyYW5zYWN0aW9uKHR4bjogVHJhbnNhY3Rpb24pOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzSW5zdGFsbG1lbnRUcmFuc2FjdGlvbih0eG4pICYmICEhdHhuLmluc3RhbGxtZW50cyAmJiB0eG4uaW5zdGFsbG1lbnRzLm51bWJlciA9PT0gMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpeEluc3RhbGxtZW50cyh0eG5zOiBUcmFuc2FjdGlvbltdKTogVHJhbnNhY3Rpb25bXSB7XG4gIHJldHVybiB0eG5zLm1hcCgodHhuOiBUcmFuc2FjdGlvbikgPT4ge1xuICAgIGNvbnN0IGNsb25lZFR4biA9IHsgLi4udHhuIH07XG5cbiAgICBpZiAoaXNJbnN0YWxsbWVudFRyYW5zYWN0aW9uKGNsb25lZFR4bikgJiYgaXNOb25Jbml0aWFsSW5zdGFsbG1lbnRUcmFuc2FjdGlvbihjbG9uZWRUeG4pICYmXG4gICAgICBjbG9uZWRUeG4uaW5zdGFsbG1lbnRzKSB7XG4gICAgICBjb25zdCBkYXRlTW9tZW50ID0gbW9tZW50KGNsb25lZFR4bi5kYXRlKTtcbiAgICAgIGNvbnN0IGFjdHVhbERhdGVNb21lbnQgPSBkYXRlTW9tZW50LmFkZChjbG9uZWRUeG4uaW5zdGFsbG1lbnRzLm51bWJlciAtIDEsICdtb250aCcpO1xuICAgICAgY2xvbmVkVHhuLmRhdGUgPSBhY3R1YWxEYXRlTW9tZW50LnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZWRUeG47XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29ydFRyYW5zYWN0aW9uc0J5RGF0ZSh0eG5zOiBUcmFuc2FjdGlvbltdKSB7XG4gIHJldHVybiBfLnNvcnRCeSh0eG5zLCBbJ2RhdGUnXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJPbGRUcmFuc2FjdGlvbnModHhuczogVHJhbnNhY3Rpb25bXSxcbiAgc3RhcnRNb21lbnQ6IE1vbWVudCwgY29tYmluZUluc3RhbGxtZW50czogYm9vbGVhbikge1xuICByZXR1cm4gdHhucy5maWx0ZXIoKHR4bikgPT4ge1xuICAgIGNvbnN0IGNvbWJpbmVOZWVkZWRBbmRJbml0aWFsT3JOb3JtYWwgPVxuICAgICAgY29tYmluZUluc3RhbGxtZW50cyAmJiAoaXNOb3JtYWxUcmFuc2FjdGlvbih0eG4pIHx8IGlzSW5pdGlhbEluc3RhbGxtZW50VHJhbnNhY3Rpb24odHhuKSk7XG4gICAgcmV0dXJuICghY29tYmluZUluc3RhbGxtZW50cyAmJiBzdGFydE1vbWVudC5pc1NhbWVPckJlZm9yZSh0eG4uZGF0ZSkpIHx8XG4gICAgICAgICAgIChjb21iaW5lTmVlZGVkQW5kSW5pdGlhbE9yTm9ybWFsICYmIHN0YXJ0TW9tZW50LmlzU2FtZU9yQmVmb3JlKHR4bi5kYXRlKSk7XG4gIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGFBQUEsR0FBQUYsT0FBQTtBQUd5QixTQUFBRCx1QkFBQUksQ0FBQSxXQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTtBQUFBLFNBQUFHLFFBQUFILENBQUEsRUFBQUksQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBUCxDQUFBLE9BQUFNLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFSLENBQUEsR0FBQUksQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVgsQ0FBQSxFQUFBSSxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBVSxjQUFBZixDQUFBLGFBQUFJLENBQUEsTUFBQUEsQ0FBQSxHQUFBWSxTQUFBLENBQUFDLE1BQUEsRUFBQWIsQ0FBQSxVQUFBQyxDQUFBLFdBQUFXLFNBQUEsQ0FBQVosQ0FBQSxJQUFBWSxTQUFBLENBQUFaLENBQUEsUUFBQUEsQ0FBQSxPQUFBRCxPQUFBLENBQUFHLE1BQUEsQ0FBQUQsQ0FBQSxPQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQWUs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