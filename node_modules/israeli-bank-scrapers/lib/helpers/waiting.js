"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeoutError = exports.SECOND = void 0;
exports.raceTimeout = raceTimeout;
exports.runSerial = runSerial;
exports.sleep = sleep;
exports.waitUntil = waitUntil;
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
class TimeoutError extends Error {}
exports.TimeoutError = TimeoutError;
const SECOND = exports.SECOND = 1000;
function timeoutPromise(ms, promise, description) {
  const timeout = new Promise((_, reject) => {
    const id = setTimeout(() => {
      clearTimeout(id);
      const error = new TimeoutError(description);
      reject(error);
    }, ms);
  });
  return Promise.race([promise,
  // casting to avoid type error- safe since this promise will always reject
  timeout]);
}

/**
 * Wait until a promise resolves with a truthy value or reject after a timeout
 */
function waitUntil(asyncTest, description = '', timeout = 10000, interval = 100) {
  const promise = new Promise((resolve, reject) => {
    function wait() {
      asyncTest().then(value => {
        if (value) {
          resolve(value);
        } else {
          setTimeout(wait, interval);
        }
      }).catch(() => {
        reject();
      });
    }
    wait();
  });
  return timeoutPromise(timeout, promise, description);
}
function raceTimeout(ms, promise) {
  return timeoutPromise(ms, promise, 'timeout').catch(err => {
    if (!(err instanceof TimeoutError)) throw err;
  });
}
function runSerial(actions) {
  return actions.reduce((m, a) => m.then(async x => [...x, await a()]), Promise.resolve(new Array()));
}
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaW1lb3V0RXJyb3IiLCJFcnJvciIsImV4cG9ydHMiLCJTRUNPTkQiLCJ0aW1lb3V0UHJvbWlzZSIsIm1zIiwicHJvbWlzZSIsImRlc2NyaXB0aW9uIiwidGltZW91dCIsIlByb21pc2UiLCJfIiwicmVqZWN0IiwiaWQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZXJyb3IiLCJyYWNlIiwid2FpdFVudGlsIiwiYXN5bmNUZXN0IiwiaW50ZXJ2YWwiLCJyZXNvbHZlIiwid2FpdCIsInRoZW4iLCJ2YWx1ZSIsImNhdGNoIiwicmFjZVRpbWVvdXQiLCJlcnIiLCJydW5TZXJpYWwiLCJhY3Rpb25zIiwicmVkdWNlIiwibSIsImEiLCJ4IiwiQXJyYXkiLCJzbGVlcCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzL3dhaXRpbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcblxufVxuXG5leHBvcnQgY29uc3QgU0VDT05EID0gMTAwMDtcblxuZnVuY3Rpb24gdGltZW91dFByb21pc2U8VD4obXM6IG51bWJlciwgcHJvbWlzZTogUHJvbWlzZTxUPiwgZGVzY3JpcHRpb246IHN0cmluZyk6IFByb21pc2U8VD4ge1xuICBjb25zdCB0aW1lb3V0ID0gbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGlkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQoaWQpO1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgVGltZW91dEVycm9yKGRlc2NyaXB0aW9uKTtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfSwgbXMpO1xuICB9KTtcblxuICByZXR1cm4gUHJvbWlzZS5yYWNlKFtcbiAgICBwcm9taXNlLFxuICAgIC8vIGNhc3RpbmcgdG8gYXZvaWQgdHlwZSBlcnJvci0gc2FmZSBzaW5jZSB0aGlzIHByb21pc2Ugd2lsbCBhbHdheXMgcmVqZWN0XG4gICAgdGltZW91dCBhcyBQcm9taXNlPFQ+LFxuICBdKTtcbn1cblxuLyoqXG4gKiBXYWl0IHVudGlsIGEgcHJvbWlzZSByZXNvbHZlcyB3aXRoIGEgdHJ1dGh5IHZhbHVlIG9yIHJlamVjdCBhZnRlciBhIHRpbWVvdXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdhaXRVbnRpbDxUPihhc3luY1Rlc3Q6ICgpID0+IFByb21pc2U8VD4sIGRlc2NyaXB0aW9uID0gJycsIHRpbWVvdXQgPSAxMDAwMCwgaW50ZXJ2YWwgPSAxMDApIHtcbiAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlPFQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBmdW5jdGlvbiB3YWl0KCkge1xuICAgICAgYXN5bmNUZXN0KCkudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0VGltZW91dCh3YWl0LCBpbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgcmVqZWN0KCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgd2FpdCgpO1xuICB9KTtcbiAgcmV0dXJuIHRpbWVvdXRQcm9taXNlKHRpbWVvdXQsIHByb21pc2UsIGRlc2NyaXB0aW9uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhY2VUaW1lb3V0KG1zOiBudW1iZXIsIHByb21pc2U6IFByb21pc2U8YW55Pikge1xuICByZXR1cm4gdGltZW91dFByb21pc2UobXMsIHByb21pc2UsICd0aW1lb3V0JykuY2F0Y2goKGVycikgPT4ge1xuICAgIGlmICghKGVyciBpbnN0YW5jZW9mIFRpbWVvdXRFcnJvcikpIHRocm93IGVycjtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydW5TZXJpYWw8VD4oYWN0aW9uczogKCgpID0+IFByb21pc2U8VD4pW10pOiBQcm9taXNlPFRbXT4ge1xuICByZXR1cm4gYWN0aW9ucy5yZWR1Y2UoKG0sIGEpID0+IG0udGhlbihhc3luYyAoeCkgPT4gWy4uLngsIGF3YWl0IGEoKV0pLCBQcm9taXNlLnJlc29sdmU8VFtdPihuZXcgQXJyYXk8VD4oKSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2xlZXAobXM6IG51bWJlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQU8sTUFBTUEsWUFBWSxTQUFTQyxLQUFLLENBQUM7QUFFdkNDLE9BQUEsQ0FBQUYsWUFBQSxHQUFBQSxZQUFBO0FBRU0sTUFBTUcsTUFBTSxHQUFBRCxPQUFBLENBQUFDLE1BQUEsR0FBRyxJQUFJO0FBRTFCLFNBQVNDLGNBQWNBLENBQUlDLEVBQVUsRUFBRUMsT0FBbUIsRUFBRUMsV0FBbUIsRUFBYztFQUMzRixNQUFNQyxPQUFPLEdBQUcsSUFBSUMsT0FBTyxDQUFDLENBQUNDLENBQUMsRUFBRUMsTUFBTSxLQUFLO0lBQ3pDLE1BQU1DLEVBQUUsR0FBR0MsVUFBVSxDQUFDLE1BQU07TUFDMUJDLFlBQVksQ0FBQ0YsRUFBRSxDQUFDO01BQ2hCLE1BQU1HLEtBQUssR0FBRyxJQUFJZixZQUFZLENBQUNPLFdBQVcsQ0FBQztNQUMzQ0ksTUFBTSxDQUFDSSxLQUFLLENBQUM7SUFDZixDQUFDLEVBQUVWLEVBQUUsQ0FBQztFQUNSLENBQUMsQ0FBQztFQUVGLE9BQU9JLE9BQU8sQ0FBQ08sSUFBSSxDQUFDLENBQ2xCVixPQUFPO0VBQ1A7RUFDQUUsT0FBTyxDQUNSLENBQUM7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDTyxTQUFTUyxTQUFTQSxDQUFJQyxTQUEyQixFQUFFWCxXQUFXLEdBQUcsRUFBRSxFQUFFQyxPQUFPLEdBQUcsS0FBSyxFQUFFVyxRQUFRLEdBQUcsR0FBRyxFQUFFO0VBQzNHLE1BQU1iLE9BQU8sR0FBRyxJQUFJRyxPQUFPLENBQUksQ0FBQ1csT0FBTyxFQUFFVCxNQUFNLEtBQUs7SUFDbEQsU0FBU1UsSUFBSUEsQ0FBQSxFQUFHO01BQ2RILFNBQVMsQ0FBQyxDQUFDLENBQUNJLElBQUksQ0FBRUMsS0FBSyxJQUFLO1FBQzFCLElBQUlBLEtBQUssRUFBRTtVQUNUSCxPQUFPLENBQUNHLEtBQUssQ0FBQztRQUNoQixDQUFDLE1BQU07VUFDTFYsVUFBVSxDQUFDUSxJQUFJLEVBQUVGLFFBQVEsQ0FBQztRQUM1QjtNQUNGLENBQUMsQ0FBQyxDQUFDSyxLQUFLLENBQUMsTUFBTTtRQUNiYixNQUFNLENBQUMsQ0FBQztNQUNWLENBQUMsQ0FBQztJQUNKO0lBQ0FVLElBQUksQ0FBQyxDQUFDO0VBQ1IsQ0FBQyxDQUFDO0VBQ0YsT0FBT2pCLGNBQWMsQ0FBQ0ksT0FBTyxFQUFFRixPQUFPLEVBQUVDLFdBQVcsQ0FBQztBQUN0RDtBQUVPLFNBQVNrQixXQUFXQSxDQUFDcEIsRUFBVSxFQUFFQyxPQUFxQixFQUFFO0VBQzdELE9BQU9GLGNBQWMsQ0FBQ0MsRUFBRSxFQUFFQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUNrQixLQUFLLENBQUVFLEdBQUcsSUFBSztJQUMzRCxJQUFJLEVBQUVBLEdBQUcsWUFBWTFCLFlBQVksQ0FBQyxFQUFFLE1BQU0wQixHQUFHO0VBQy9DLENBQUMsQ0FBQztBQUNKO0FBRU8sU0FBU0MsU0FBU0EsQ0FBSUMsT0FBNkIsRUFBZ0I7RUFDeEUsT0FBT0EsT0FBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQ0MsQ0FBQyxFQUFFQyxDQUFDLEtBQUtELENBQUMsQ0FBQ1IsSUFBSSxDQUFDLE1BQU9VLENBQUMsSUFBSyxDQUFDLEdBQUdBLENBQUMsRUFBRSxNQUFNRCxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRXRCLE9BQU8sQ0FBQ1csT0FBTyxDQUFNLElBQUlhLEtBQUssQ0FBSSxDQUFDLENBQUMsQ0FBQztBQUMvRztBQUVPLFNBQVNDLEtBQUtBLENBQUM3QixFQUFVLEVBQUU7RUFDaEMsT0FBTyxJQUFJSSxPQUFPLENBQUVXLE9BQU8sSUFBS1AsVUFBVSxDQUFDTyxPQUFPLEVBQUVmLEVBQUUsQ0FBQyxDQUFDO0FBQzFEIiwiaWdub3JlTGlzdCI6W119