"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCurrentUrl = getCurrentUrl;
exports.waitForNavigation = waitForNavigation;
exports.waitForNavigationAndDomLoad = waitForNavigationAndDomLoad;
exports.waitForRedirect = waitForRedirect;
exports.waitForUrl = waitForUrl;
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.constructor.js");
require("core-js/modules/es.regexp.exec.js");
var _waiting = require("./waiting");
async function waitForNavigation(pageOrFrame, options) {
  await pageOrFrame.waitForNavigation(options);
}
async function waitForNavigationAndDomLoad(page) {
  await waitForNavigation(page, {
    waitUntil: 'domcontentloaded'
  });
}
function getCurrentUrl(pageOrFrame, clientSide = false) {
  if (clientSide) {
    return pageOrFrame.evaluate(() => window.location.href);
  }
  return pageOrFrame.url();
}
async function waitForRedirect(pageOrFrame, timeout = 20000, clientSide = false, ignoreList = []) {
  const initial = await getCurrentUrl(pageOrFrame, clientSide);
  await (0, _waiting.waitUntil)(async () => {
    const current = await getCurrentUrl(pageOrFrame, clientSide);
    return current !== initial && !ignoreList.includes(current);
  }, `waiting for redirect from ${initial}`, timeout, 1000);
}
async function waitForUrl(pageOrFrame, url, timeout = 20000, clientSide = false) {
  await (0, _waiting.waitUntil)(async () => {
    const current = await getCurrentUrl(pageOrFrame, clientSide);
    return url instanceof RegExp ? url.test(current) : url === current;
  }, `waiting for url to be ${url}`, timeout, 1000);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfd2FpdGluZyIsInJlcXVpcmUiLCJ3YWl0Rm9yTmF2aWdhdGlvbiIsInBhZ2VPckZyYW1lIiwib3B0aW9ucyIsIndhaXRGb3JOYXZpZ2F0aW9uQW5kRG9tTG9hZCIsInBhZ2UiLCJ3YWl0VW50aWwiLCJnZXRDdXJyZW50VXJsIiwiY2xpZW50U2lkZSIsImV2YWx1YXRlIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwidXJsIiwid2FpdEZvclJlZGlyZWN0IiwidGltZW91dCIsImlnbm9yZUxpc3QiLCJpbml0aWFsIiwiY3VycmVudCIsImluY2x1ZGVzIiwid2FpdEZvclVybCIsIlJlZ0V4cCIsInRlc3QiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvaGVscGVycy9uYXZpZ2F0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIHR5cGUgRnJhbWUsXG4gIHR5cGUgUGFnZSwgdHlwZSBXYWl0Rm9yT3B0aW9ucyxcbn0gZnJvbSAncHVwcGV0ZWVyJztcbmltcG9ydCB7IHdhaXRVbnRpbCB9IGZyb20gJy4vd2FpdGluZyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yTmF2aWdhdGlvbihwYWdlT3JGcmFtZTogUGFnZSB8IEZyYW1lLCBvcHRpb25zPzogV2FpdEZvck9wdGlvbnMpIHtcbiAgYXdhaXQgcGFnZU9yRnJhbWUud2FpdEZvck5hdmlnYXRpb24ob3B0aW9ucyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yTmF2aWdhdGlvbkFuZERvbUxvYWQocGFnZTogUGFnZSkge1xuICBhd2FpdCB3YWl0Rm9yTmF2aWdhdGlvbihwYWdlLCB7IHdhaXRVbnRpbDogJ2RvbWNvbnRlbnRsb2FkZWQnIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudFVybChwYWdlT3JGcmFtZTogUGFnZSB8IEZyYW1lLCBjbGllbnRTaWRlID0gZmFsc2UpIHtcbiAgaWYgKGNsaWVudFNpZGUpIHtcbiAgICByZXR1cm4gcGFnZU9yRnJhbWUuZXZhbHVhdGUoKCkgPT4gd2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICB9XG5cbiAgcmV0dXJuIHBhZ2VPckZyYW1lLnVybCgpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvclJlZGlyZWN0KHBhZ2VPckZyYW1lOiBQYWdlIHwgRnJhbWUsIHRpbWVvdXQgPSAyMDAwMCxcbiAgY2xpZW50U2lkZSA9IGZhbHNlLCBpZ25vcmVMaXN0OiBzdHJpbmdbXSA9IFtdKSB7XG4gIGNvbnN0IGluaXRpYWwgPSBhd2FpdCBnZXRDdXJyZW50VXJsKHBhZ2VPckZyYW1lLCBjbGllbnRTaWRlKTtcblxuICBhd2FpdCB3YWl0VW50aWwoYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnQgPSBhd2FpdCBnZXRDdXJyZW50VXJsKHBhZ2VPckZyYW1lLCBjbGllbnRTaWRlKTtcbiAgICByZXR1cm4gY3VycmVudCAhPT0gaW5pdGlhbCAmJiAhaWdub3JlTGlzdC5pbmNsdWRlcyhjdXJyZW50KTtcbiAgfSwgYHdhaXRpbmcgZm9yIHJlZGlyZWN0IGZyb20gJHtpbml0aWFsfWAsIHRpbWVvdXQsIDEwMDApO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2FpdEZvclVybChwYWdlT3JGcmFtZTogUGFnZSB8IEZyYW1lLCB1cmw6IHN0cmluZyB8IFJlZ0V4cCwgdGltZW91dCA9IDIwMDAwLCBjbGllbnRTaWRlID0gZmFsc2UpIHtcbiAgYXdhaXQgd2FpdFVudGlsKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBjdXJyZW50ID0gYXdhaXQgZ2V0Q3VycmVudFVybChwYWdlT3JGcmFtZSwgY2xpZW50U2lkZSk7XG4gICAgcmV0dXJuIHVybCBpbnN0YW5jZW9mIFJlZ0V4cCA/IHVybC50ZXN0KGN1cnJlbnQpIDogdXJsID09PSBjdXJyZW50O1xuICB9LCBgd2FpdGluZyBmb3IgdXJsIHRvIGJlICR7dXJsfWAsIHRpbWVvdXQsIDEwMDApO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBSUEsSUFBQUEsUUFBQSxHQUFBQyxPQUFBO0FBRU8sZUFBZUMsaUJBQWlCQSxDQUFDQyxXQUF5QixFQUFFQyxPQUF3QixFQUFFO0VBQzNGLE1BQU1ELFdBQVcsQ0FBQ0QsaUJBQWlCLENBQUNFLE9BQU8sQ0FBQztBQUM5QztBQUVPLGVBQWVDLDJCQUEyQkEsQ0FBQ0MsSUFBVSxFQUFFO0VBQzVELE1BQU1KLGlCQUFpQixDQUFDSSxJQUFJLEVBQUU7SUFBRUMsU0FBUyxFQUFFO0VBQW1CLENBQUMsQ0FBQztBQUNsRTtBQUVPLFNBQVNDLGFBQWFBLENBQUNMLFdBQXlCLEVBQUVNLFVBQVUsR0FBRyxLQUFLLEVBQUU7RUFDM0UsSUFBSUEsVUFBVSxFQUFFO0lBQ2QsT0FBT04sV0FBVyxDQUFDTyxRQUFRLENBQUMsTUFBTUMsTUFBTSxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQztFQUN6RDtFQUVBLE9BQU9WLFdBQVcsQ0FBQ1csR0FBRyxDQUFDLENBQUM7QUFDMUI7QUFFTyxlQUFlQyxlQUFlQSxDQUFDWixXQUF5QixFQUFFYSxPQUFPLEdBQUcsS0FBSyxFQUM5RVAsVUFBVSxHQUFHLEtBQUssRUFBRVEsVUFBb0IsR0FBRyxFQUFFLEVBQUU7RUFDL0MsTUFBTUMsT0FBTyxHQUFHLE1BQU1WLGFBQWEsQ0FBQ0wsV0FBVyxFQUFFTSxVQUFVLENBQUM7RUFFNUQsTUFBTSxJQUFBRixrQkFBUyxFQUFDLFlBQVk7SUFDMUIsTUFBTVksT0FBTyxHQUFHLE1BQU1YLGFBQWEsQ0FBQ0wsV0FBVyxFQUFFTSxVQUFVLENBQUM7SUFDNUQsT0FBT1UsT0FBTyxLQUFLRCxPQUFPLElBQUksQ0FBQ0QsVUFBVSxDQUFDRyxRQUFRLENBQUNELE9BQU8sQ0FBQztFQUM3RCxDQUFDLEVBQUUsNkJBQTZCRCxPQUFPLEVBQUUsRUFBRUYsT0FBTyxFQUFFLElBQUksQ0FBQztBQUMzRDtBQUVPLGVBQWVLLFVBQVVBLENBQUNsQixXQUF5QixFQUFFVyxHQUFvQixFQUFFRSxPQUFPLEdBQUcsS0FBSyxFQUFFUCxVQUFVLEdBQUcsS0FBSyxFQUFFO0VBQ3JILE1BQU0sSUFBQUYsa0JBQVMsRUFBQyxZQUFZO0lBQzFCLE1BQU1ZLE9BQU8sR0FBRyxNQUFNWCxhQUFhLENBQUNMLFdBQVcsRUFBRU0sVUFBVSxDQUFDO0lBQzVELE9BQU9LLEdBQUcsWUFBWVEsTUFBTSxHQUFHUixHQUFHLENBQUNTLElBQUksQ0FBQ0osT0FBTyxDQUFDLEdBQUdMLEdBQUcsS0FBS0ssT0FBTztFQUNwRSxDQUFDLEVBQUUseUJBQXlCTCxHQUFHLEVBQUUsRUFBRUUsT0FBTyxFQUFFLElBQUksQ0FBQztBQUNuRCIsImlnbm9yZUxpc3QiOltdfQ==