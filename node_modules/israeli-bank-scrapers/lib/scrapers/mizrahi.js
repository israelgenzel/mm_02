"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/esnext.aggregate-error.js");
require("core-js/modules/esnext.promise.any.js");
var _moment = _interopRequireDefault(require("moment"));
var _constants = require("../constants");
var _elementsInteractions = require("../helpers/elements-interactions");
var _fetch = require("../helpers/fetch");
var _navigation = require("../helpers/navigation");
var _transactions = require("../transactions");
var _baseScraperWithBrowser = require("./base-scraper-with-browser");
var _errors = require("./errors");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const BASE_WEBSITE_URL = 'https://www.mizrahi-tefahot.co.il';
const LOGIN_URL = `${BASE_WEBSITE_URL}/login/index.html#/auth-page-he`;
const BASE_APP_URL = 'https://mto.mizrahi-tefahot.co.il';
const AFTER_LOGIN_BASE_URL = /https:\/\/mto\.mizrahi-tefahot\.co\.il\/OnlineApp\/.*/;
const OSH_PAGE = '/osh/legacy/legacy-Osh-Main';
const TRANSACTIONS_PAGE = '/osh/legacy/root-main-osh-p428New';
const TRANSACTIONS_REQUEST_URLS = [`${BASE_APP_URL}/OnlinePilot/api/SkyOSH/get428Index`, `${BASE_APP_URL}/Online/api/SkyOSH/get428Index`];
const PENDING_TRANSACTIONS_PAGE = '/osh/legacy/legacy-Osh-p420';
const PENDING_TRANSACTIONS_IFRAME = 'p420.aspx';
const CHANGE_PASSWORD_URL = /https:\/\/www\.mizrahi-tefahot\.co\.il\/login\/index\.html#\/change-pass/;
const DATE_FORMAT = 'DD/MM/YYYY';
const MAX_ROWS_PER_REQUEST = 10000000000;
const usernameSelector = '#emailDesktopHeb';
const passwordSelector = '#passwordIDDesktopHEB';
const submitButtonSelector = '.form-desktop button';
const invalidPasswordSelector = 'a[href*="https://sc.mizrahi-tefahot.co.il/SCServices/SC/P010.aspx"]';
const afterLoginSelector = '#dropdownBasic';
const loginSpinnerSelector = 'div.ngx-overlay.loading-foreground';
const accountDropDownItemSelector = '#AccountPicker .item';
const pendingTrxIdentifierId = '#ctl00_ContentPlaceHolder2_panel1';
const checkingAccountTabHebrewName = 'עובר ושב';
const checkingAccountTabEnglishName = 'Checking Account';
function createLoginFields(credentials) {
  return [{
    selector: usernameSelector,
    value: credentials.username
  }, {
    selector: passwordSelector,
    value: credentials.password
  }];
}
async function isLoggedIn(options) {
  if (!(options !== null && options !== void 0 && options.page)) {
    return false;
  }
  const oshXPath = `//a//span[contains(., "${checkingAccountTabHebrewName}") or contains(., "${checkingAccountTabEnglishName}")]`;
  const oshTab = await options.page.$$(`xpath${oshXPath}`);
  return oshTab.length > 0;
}
function getPossibleLoginResults(page) {
  return {
    [_baseScraperWithBrowser.LoginResults.Success]: [AFTER_LOGIN_BASE_URL, isLoggedIn],
    [_baseScraperWithBrowser.LoginResults.InvalidPassword]: [async () => !!(await page.$(invalidPasswordSelector))],
    [_baseScraperWithBrowser.LoginResults.ChangePassword]: [CHANGE_PASSWORD_URL]
  };
}
function getStartMoment(optionsStartDate) {
  const defaultStartMoment = (0, _moment.default)().subtract(1, 'years');
  const startDate = optionsStartDate || defaultStartMoment.toDate();
  return _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));
}
function createDataFromRequest(request, optionsStartDate) {
  const data = JSON.parse(request.postData() || '{}');
  data.inFromDate = getStartMoment(optionsStartDate).format(DATE_FORMAT);
  data.inToDate = (0, _moment.default)().format(DATE_FORMAT);
  data.table.maxRow = MAX_ROWS_PER_REQUEST;
  return data;
}
function createHeadersFromRequest(request) {
  return {
    'mizrahixsrftoken': request.headers().mizrahixsrftoken,
    'Content-Type': request.headers()['content-type']
  };
}
function convertTransactions(txns) {
  return txns.map(row => {
    const txnDate = (0, _moment.default)(row.MC02PeulaTaaEZ, _moment.default.HTML5_FMT.DATETIME_LOCAL_SECONDS).toISOString();
    return {
      type: _transactions.TransactionTypes.Normal,
      identifier: row.MC02AsmahtaMekoritEZ ? parseInt(row.MC02AsmahtaMekoritEZ, 10) : undefined,
      date: txnDate,
      processedDate: txnDate,
      originalAmount: row.MC02SchumEZ,
      originalCurrency: _constants.SHEKEL_CURRENCY,
      chargedAmount: row.MC02SchumEZ,
      description: row.MC02TnuaTeurEZ,
      status: _transactions.TransactionStatuses.Completed
    };
  });
}
async function extractPendingTransactions(page) {
  const pendingTxn = await (0, _elementsInteractions.pageEvalAll)(page, 'tr.rgRow', [], trs => {
    return trs.map(tr => Array.from(tr.querySelectorAll('td'), td => td.textContent || ''));
  });
  return pendingTxn.map(txn => {
    const date = (0, _moment.default)(txn[0], 'DD/MM/YY').toISOString();
    const amount = parseInt(txn[3], 10);
    return {
      type: _transactions.TransactionTypes.Normal,
      date,
      processedDate: date,
      originalAmount: amount,
      originalCurrency: _constants.SHEKEL_CURRENCY,
      chargedAmount: amount,
      description: txn[1],
      status: _transactions.TransactionStatuses.Pending
    };
  });
}
async function postLogin(page) {
  await Promise.race([(0, _elementsInteractions.waitUntilElementFound)(page, afterLoginSelector), (0, _elementsInteractions.waitUntilElementFound)(page, invalidPasswordSelector), (0, _navigation.waitForUrl)(page, CHANGE_PASSWORD_URL)]);
}
class MizrahiScraper extends _baseScraperWithBrowser.BaseScraperWithBrowser {
  getLoginOptions(credentials) {
    return {
      loginUrl: LOGIN_URL,
      fields: createLoginFields(credentials),
      submitButtonSelector,
      checkReadiness: async () => (0, _elementsInteractions.waitUntilElementDisappear)(this.page, loginSpinnerSelector),
      postAction: async () => postLogin(this.page),
      possibleResults: getPossibleLoginResults(this.page)
    };
  }
  async fetchData() {
    await this.page.$eval('#dropdownBasic, .item', el => el.click());
    const numOfAccounts = (await this.page.$$(accountDropDownItemSelector)).length;
    try {
      const results = [];
      for (let i = 0; i < numOfAccounts; i += 1) {
        if (i > 0) {
          await this.page.$eval('#dropdownBasic, .item', el => el.click());
        }
        await this.page.$eval(`${accountDropDownItemSelector}:nth-child(${i + 1})`, el => el.click());
        results.push(await this.fetchAccount());
      }
      return {
        success: true,
        accounts: results
      };
    } catch (e) {
      return {
        success: false,
        errorType: _errors.ScraperErrorTypes.Generic,
        errorMessage: e.message
      };
    }
  }
  async getPendingTransactions() {
    await this.page.$eval(`a[href*="${PENDING_TRANSACTIONS_PAGE}"]`, el => el.click());
    const frame = await (0, _elementsInteractions.waitUntilIframeFound)(this.page, f => f.url().includes(PENDING_TRANSACTIONS_IFRAME));
    const isPending = await (0, _elementsInteractions.waitUntilElementFound)(frame, pendingTrxIdentifierId).then(() => true).catch(() => false);
    if (!isPending) {
      return [];
    }
    const pendingTxn = await extractPendingTransactions(frame);
    return pendingTxn;
  }
  async fetchAccount() {
    var _response$body$fields;
    await this.page.waitForSelector(`a[href*="${OSH_PAGE}"]`);
    await this.page.$eval(`a[href*="${OSH_PAGE}"]`, el => el.click());
    await (0, _elementsInteractions.waitUntilElementFound)(this.page, `a[href*="${TRANSACTIONS_PAGE}"]`);
    await this.page.$eval(`a[href*="${TRANSACTIONS_PAGE}"]`, el => el.click());
    const accountNumberElement = await this.page.$('#dropdownBasic b span');
    const accountNumberHandle = await (accountNumberElement === null || accountNumberElement === void 0 ? void 0 : accountNumberElement.getProperty('title'));
    const accountNumber = await (accountNumberHandle === null || accountNumberHandle === void 0 ? void 0 : accountNumberHandle.jsonValue());
    if (!accountNumber) {
      throw new Error('Account number not found');
    }
    const response = await Promise.any(TRANSACTIONS_REQUEST_URLS.map(async url => {
      const request = await this.page.waitForRequest(url);
      const data = createDataFromRequest(request, this.options.startDate);
      const headers = createHeadersFromRequest(request);
      return (0, _fetch.fetchPostWithinPage)(this.page, url, data, headers);
    }));
    if (!response || response.header.success === false) {
      throw new Error(`Error fetching transaction. Response message: ${response ? response.header.messages[0].text : ''}`);
    }
    const relevantRows = response.body.table.rows.filter(row => row.RecTypeSpecified);
    const oshTxn = convertTransactions(relevantRows);

    // workaround for a bug which the bank's API returns transactions before the requested start date
    const startMoment = getStartMoment(this.options.startDate);
    const oshTxnAfterStartDate = oshTxn.filter(txn => (0, _moment.default)(txn.date).isSameOrAfter(startMoment));
    const pendingTxn = await this.getPendingTransactions();
    const allTxn = oshTxnAfterStartDate.concat(pendingTxn);
    return {
      accountNumber,
      txns: allTxn,
      balance: +((_response$body$fields = response.body.fields) === null || _response$body$fields === void 0 ? void 0 : _response$body$fields.Yitra)
    };
  }
}
var _default = exports.default = MizrahiScraper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,