"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoginResults = exports.BaseScraperWithBrowser = void 0;
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.constructor.js");
require("core-js/modules/es.regexp.exec.js");
var _puppeteer = _interopRequireDefault(require("puppeteer"));
var _definitions = require("../definitions");
var _debug = require("../helpers/debug");
var _elementsInteractions = require("../helpers/elements-interactions");
var _navigation = require("../helpers/navigation");
var _baseScraper = require("./base-scraper");
var _errors = require("./errors");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], t.indexOf(o) >= 0 || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }
const VIEWPORT_WIDTH = 1024;
const VIEWPORT_HEIGHT = 768;
const OK_STATUS = 200;
const debug = (0, _debug.getDebug)('base-scraper-with-browser');
var LoginBaseResults = /*#__PURE__*/function (LoginBaseResults) {
  LoginBaseResults["Success"] = "SUCCESS";
  LoginBaseResults["UnknownError"] = "UNKNOWN_ERROR";
  return LoginBaseResults;
}(LoginBaseResults || {});
const {
    Timeout,
    Generic,
    General
  } = _errors.ScraperErrorTypes,
  rest = _objectWithoutProperties(_errors.ScraperErrorTypes, ["Timeout", "Generic", "General"]);
const LoginResults = exports.LoginResults = _objectSpread(_objectSpread({}, rest), LoginBaseResults);

// eslint-disable-next-line @typescript-eslint/no-redeclare

async function getKeyByValue(object, value, page) {
  const keys = Object.keys(object);
  for (const key of keys) {
    // @ts-ignore
    const conditions = object[key];
    for (const condition of conditions) {
      let result = false;
      if (condition instanceof RegExp) {
        result = condition.test(value);
      } else if (typeof condition === 'function') {
        result = await condition({
          page,
          value
        });
      } else {
        result = value.toLowerCase() === condition.toLowerCase();
      }
      if (result) {
        // @ts-ignore
        return Promise.resolve(key);
      }
    }
  }
  return Promise.resolve(LoginResults.UnknownError);
}
function createGeneralError() {
  return {
    success: false,
    errorType: _errors.ScraperErrorTypes.General
  };
}
class BaseScraperWithBrowser extends _baseScraper.BaseScraper {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "cleanups", []);
    // NOTICE - it is discouraged to use bang (!) in general. It is used here because
    // all the classes that inherit from this base assume is it mandatory.
    _defineProperty(this, "page", void 0);
  }
  getViewPort() {
    return {
      width: VIEWPORT_WIDTH,
      height: VIEWPORT_HEIGHT
    };
  }
  async initialize() {
    await super.initialize();
    debug('initialize scraper');
    this.emitProgress(_definitions.ScraperProgressTypes.Initializing);
    const page = await this.initializePage();
    await page.setCacheEnabled(false); // Clear cache and avoid 300's response status

    if (!page) {
      debug('failed to initiate a browser page, exit');
      return;
    }
    this.page = page;
    this.cleanups.push(() => page.close());
    if (this.options.defaultTimeout) {
      this.page.setDefaultTimeout(this.options.defaultTimeout);
    }
    if (this.options.preparePage) {
      debug("execute 'preparePage' interceptor provided in options");
      await this.options.preparePage(this.page);
    }
    const viewport = this.getViewPort();
    debug(`set viewport to width ${viewport.width}, height ${viewport.height}`);
    await this.page.setViewport({
      width: viewport.width,
      height: viewport.height
    });
    this.page.on('requestfailed', request => {
      var _request$failure;
      debug('Request failed: %s %s', (_request$failure = request.failure()) === null || _request$failure === void 0 ? void 0 : _request$failure.errorText, request.url());
    });
  }
  async initializePage() {
    debug('initialize browser page');
    if ('browserContext' in this.options) {
      debug('Using the browser context provided in options');
      return this.options.browserContext.newPage();
    }
    if ('browser' in this.options) {
      debug('Using the browser instance provided in options');
      const {
        browser
      } = this.options;

      /**
       * For backward compatibility, we will close the browser even if we didn't create it
       */
      if (!this.options.skipCloseBrowser) {
        this.cleanups.push(async () => {
          debug('closing the browser');
          await browser.close();
        });
      }
      return browser.newPage();
    }
    const {
      timeout,
      args,
      executablePath,
      showBrowser
    } = this.options;
    const headless = !showBrowser;
    debug(`launch a browser with headless mode = ${headless}`);
    const browser = await _puppeteer.default.launch({
      env: this.options.verbose ? _objectSpread({
        DEBUG: '*'
      }, process.env) : undefined,
      headless,
      executablePath,
      args,
      timeout
    });
    this.cleanups.push(async () => {
      debug('closing the browser');
      await browser.close();
    });
    if (this.options.prepareBrowser) {
      debug("execute 'prepareBrowser' interceptor provided in options");
      await this.options.prepareBrowser(browser);
    }
    debug('create a new browser page');
    return browser.newPage();
  }
  async navigateTo(url, page, timeout, waitUntil = 'load') {
    const pageToUse = page || this.page;
    if (!pageToUse) {
      return;
    }
    const options = _objectSpread(_objectSpread({}, timeout === null ? null : {
      timeout
    }), {}, {
      waitUntil
    });
    const response = await pageToUse.goto(url, options);

    // note: response will be null when navigating to same url while changing the hash part. the condition below will always accept null as valid result.
    if (response !== null && (response === undefined || response.status() !== OK_STATUS)) {
      throw new Error(`Error while trying to navigate to url ${url}`);
    }
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getLoginOptions(_credentials) {
    throw new Error(`getLoginOptions() is not created in ${this.options.companyId}`);
  }
  async fillInputs(pageOrFrame, fields) {
    const modified = [...fields];
    const input = modified.shift();
    if (!input) {
      return;
    }
    await (0, _elementsInteractions.fillInput)(pageOrFrame, input.selector, input.value);
    if (modified.length) {
      await this.fillInputs(pageOrFrame, modified);
    }
  }
  async login(credentials) {
    if (!credentials || !this.page) {
      return createGeneralError();
    }
    debug('execute login process');
    const loginOptions = this.getLoginOptions(credentials);
    if (loginOptions.userAgent) {
      debug('set custom user agent provided in options');
      await this.page.setUserAgent(loginOptions.userAgent);
    }
    debug('navigate to login url');
    await this.navigateTo(loginOptions.loginUrl, undefined, undefined, loginOptions.waitUntil);
    if (loginOptions.checkReadiness) {
      debug("execute 'checkReadiness' interceptor provided in login options");
      await loginOptions.checkReadiness();
    } else if (typeof loginOptions.submitButtonSelector === 'string') {
      debug('wait until submit button is available');
      await (0, _elementsInteractions.waitUntilElementFound)(this.page, loginOptions.submitButtonSelector);
    }
    let loginFrameOrPage = this.page;
    if (loginOptions.preAction) {
      debug("execute 'preAction' interceptor provided in login options");
      loginFrameOrPage = (await loginOptions.preAction()) || this.page;
    }
    debug('fill login components input with relevant values');
    await this.fillInputs(loginFrameOrPage, loginOptions.fields);
    debug('click on login submit button');
    if (typeof loginOptions.submitButtonSelector === 'string') {
      await (0, _elementsInteractions.clickButton)(loginFrameOrPage, loginOptions.submitButtonSelector);
    } else {
      await loginOptions.submitButtonSelector();
    }
    this.emitProgress(_definitions.ScraperProgressTypes.LoggingIn);
    if (loginOptions.postAction) {
      debug("execute 'postAction' interceptor provided in login options");
      await loginOptions.postAction();
    } else {
      debug('wait for page navigation');
      await (0, _navigation.waitForNavigation)(this.page);
    }
    debug('check login result');
    const current = await (0, _navigation.getCurrentUrl)(this.page, true);
    const loginResult = await getKeyByValue(loginOptions.possibleResults, current, this.page);
    debug(`handle login results ${loginResult}`);
    return this.handleLoginResult(loginResult);
  }
  async terminate(_success) {
    debug(`terminating browser with success = ${_success}`);
    this.emitProgress(_definitions.ScraperProgressTypes.Terminating);
    if (!_success && !!this.options.storeFailureScreenShotPath) {
      debug(`create a snapshot before terminated in ${this.options.storeFailureScreenShotPath}`);
      await this.page.screenshot({
        path: this.options.storeFailureScreenShotPath,
        fullPage: true
      });
    }
    await Promise.all(this.cleanups.reverse().map(cleanup => cleanup()));
    this.cleanups = [];
  }
  handleLoginResult(loginResult) {
    switch (loginResult) {
      case LoginResults.Success:
        this.emitProgress(_definitions.ScraperProgressTypes.LoginSuccess);
        return {
          success: true
        };
      case LoginResults.InvalidPassword:
      case LoginResults.UnknownError:
        this.emitProgress(_definitions.ScraperProgressTypes.LoginFailed);
        return {
          success: false,
          errorType: loginResult === LoginResults.InvalidPassword ? _errors.ScraperErrorTypes.InvalidPassword : _errors.ScraperErrorTypes.General,
          errorMessage: `Login failed with ${loginResult} error`
        };
      case LoginResults.ChangePassword:
        this.emitProgress(_definitions.ScraperProgressTypes.ChangePassword);
        return {
          success: false,
          errorType: _errors.ScraperErrorTypes.ChangePassword
        };
      default:
        throw new Error(`unexpected login result "${loginResult}"`);
    }
  }
}
exports.BaseScraperWithBrowser = BaseScraperWithBrowser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,