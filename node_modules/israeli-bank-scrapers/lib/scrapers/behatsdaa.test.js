"use strict";

require("core-js/modules/es.promise.js");
var _definitions = require("../definitions");
var _testsUtils = require("../tests/tests-utils");
var _baseScraperWithBrowser = require("./base-scraper-with-browser");
var _behatsdaa = _interopRequireDefault(require("./behatsdaa"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const testsConfig = (0, _testsUtils.getTestsConfig)();
describe('Behatsdaa scraper', () => {
  beforeAll(() => {
    (0, _testsUtils.extendAsyncTimeout)();
  });
  it('should expose login fields in scrapers constant', () => {
    expect(_definitions.SCRAPERS[_definitions.CompanyTypes.behatsdaa]).toBeDefined();
    expect(_definitions.SCRAPERS[_definitions.CompanyTypes.behatsdaa].loginFields).toContain('id');
    expect(_definitions.SCRAPERS[_definitions.CompanyTypes.behatsdaa].loginFields).toContain('password');
  });
  (0, _testsUtils.maybeTestCompanyAPI)(_definitions.CompanyTypes.behatsdaa, config => config.companyAPI.invalidPassword)('should fail on invalid user/password"', async () => {
    const scraper = new _behatsdaa.default(_objectSpread(_objectSpread({}, testsConfig.options), {}, {
      companyId: _definitions.CompanyTypes.behatsdaa
    }));
    const result = await scraper.scrape({
      id: 'foofoofoo',
      password: 'barbarbar'
    });
    expect(result).toBeDefined();
    expect(result.success).toBeFalsy();
    expect(result.errorType).toBe(_baseScraperWithBrowser.LoginResults.InvalidPassword);
  });
  (0, _testsUtils.maybeTestCompanyAPI)(_definitions.CompanyTypes.behatsdaa)('should scrape transactions', async () => {
    const scraper = new _behatsdaa.default(_objectSpread(_objectSpread({}, testsConfig.options), {}, {
      companyId: _definitions.CompanyTypes.behatsdaa
    }));
    const result = await scraper.scrape(testsConfig.credentials[_definitions.CompanyTypes.behatsdaa]);
    expect(result).toBeDefined();
    expect(result.errorMessage).toBeFalsy();
    expect(result.errorType).toBeFalsy();
    expect(result.success).toBeTruthy();
    expect(result.accounts).toBeDefined();
    expect(result.accounts).toHaveLength(1);
    (0, _testsUtils.exportTransactions)(_definitions.CompanyTypes.behatsdaa, result.accounts || []);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,