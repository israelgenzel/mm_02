"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.array.flat-map.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.sort.js");
require("core-js/modules/es.array.unscopables.flat-map.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
require("core-js/modules/es.string.trim.js");
require("core-js/modules/esnext.string.match-all.js");
var _moment = _interopRequireDefault(require("moment/moment"));
var _debug = require("../helpers/debug");
var _fetch = require("../helpers/fetch");
var _transactions = require("../transactions");
var _baseScraper = require("./base-scraper");
var _errors = require("./errors");
var _oneZeroQueries = require("./one-zero-queries");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const HEBREW_WORDS_REGEX = /[\u0590-\u05FF][\u0590-\u05FF"'\-_ /\\]*[\u0590-\u05FF]/g;
const debug = (0, _debug.getDebug)('one-zero');
const IDENTITY_SERVER_URL = 'https://identity.tfd-bank.com/v1/';
const GRAPHQL_API_URL = 'https://mobile.tfd-bank.com/mobile-graph/graphql';
class OneZeroScraper extends _baseScraper.BaseScraper {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "otpContext", void 0);
    _defineProperty(this, "accessToken", void 0);
  }
  async triggerTwoFactorAuth(phoneNumber) {
    if (!phoneNumber.startsWith('+')) {
      return (0, _errors.createGenericError)('A full international phone number starting with + and a three digit country code is required');
    }
    debug('Fetching device token');
    const deviceTokenResponse = await (0, _fetch.fetchPost)(`${IDENTITY_SERVER_URL}/devices/token`, {
      extClientId: 'mobile',
      os: 'Android'
    });
    const {
      resultData: {
        deviceToken
      }
    } = deviceTokenResponse;
    debug(`Sending OTP to phone number ${phoneNumber}`);
    const otpPrepareResponse = await (0, _fetch.fetchPost)(`${IDENTITY_SERVER_URL}/otp/prepare`, {
      factorValue: phoneNumber,
      deviceToken,
      otpChannel: 'SMS_OTP'
    });
    const {
      resultData: {
        otpContext
      }
    } = otpPrepareResponse;
    this.otpContext = otpContext;
    return {
      success: true
    };
  }
  async getLongTermTwoFactorToken(otpCode) {
    if (!this.otpContext) {
      return (0, _errors.createGenericError)('triggerOtp was not called before calling getPermenantOtpToken()');
    }
    debug('Requesting OTP token');
    const otpVerifyResponse = await (0, _fetch.fetchPost)(`${IDENTITY_SERVER_URL}/otp/verify`, {
      otpContext: this.otpContext,
      otpCode
    });
    const {
      resultData: {
        otpToken
      }
    } = otpVerifyResponse;
    return {
      success: true,
      longTermTwoFactorAuthToken: otpToken
    };
  }
  async resolveOtpToken(credentials) {
    if ('otpLongTermToken' in credentials) {
      if (!credentials.otpLongTermToken) {
        return (0, _errors.createGenericError)('Invalid otpLongTermToken');
      }
      return {
        success: true,
        longTermTwoFactorAuthToken: credentials.otpLongTermToken
      };
    }
    if (!credentials.otpCodeRetriever) {
      return {
        success: false,
        errorType: _errors.ScraperErrorTypes.TwoFactorRetrieverMissing,
        errorMessage: 'otpCodeRetriever is required when otpPermanentToken is not provided'
      };
    }
    if (!credentials.phoneNumber) {
      return (0, _errors.createGenericError)('phoneNumber is required when providing a otpCodeRetriever callback');
    }
    debug('Triggering user supplied otpCodeRetriever callback');
    const triggerResult = await this.triggerTwoFactorAuth(credentials.phoneNumber);
    if (!triggerResult.success) {
      return triggerResult;
    }
    const otpCode = await credentials.otpCodeRetriever();
    const otpTokenResult = await this.getLongTermTwoFactorToken(otpCode);
    if (!otpTokenResult.success) {
      return otpTokenResult;
    }
    return {
      success: true,
      longTermTwoFactorAuthToken: otpTokenResult.longTermTwoFactorAuthToken
    };
  }
  async login(credentials) {
    const otpTokenResult = await this.resolveOtpToken(credentials);
    if (!otpTokenResult.success) {
      return otpTokenResult;
    }
    debug('Requesting id token');
    const getIdTokenResponse = await (0, _fetch.fetchPost)(`${IDENTITY_SERVER_URL}/getIdToken`, {
      otpSmsToken: otpTokenResult.longTermTwoFactorAuthToken,
      email: credentials.email,
      pass: credentials.password,
      pinCode: ''
    });
    const {
      resultData: {
        idToken
      }
    } = getIdTokenResponse;
    debug('Requesting session token');
    const getSessionTokenResponse = await (0, _fetch.fetchPost)(`${IDENTITY_SERVER_URL}/sessions/token`, {
      idToken,
      pass: credentials.password
    });
    const {
      resultData: {
        accessToken
      }
    } = getSessionTokenResponse;
    this.accessToken = accessToken;
    return {
      success: true,
      persistentOtpToken: otpTokenResult.longTermTwoFactorAuthToken
    };
  }
  async fetchPortfolioMovements(portfolio, startDate) {
    // TODO: Find out if we need the other accounts, there seems to always be one
    const account = portfolio.accounts[0];
    let cursor = null;
    const movements = [];
    while (!movements.length || new Date(movements[0].movementTimestamp) >= startDate) {
      debug(`Fetching transactions for account ${portfolio.portfolioNum}...`);
      const {
        movements: {
          movements: newMovements,
          pagination
        }
      } = await (0, _fetch.fetchGraphql)(GRAPHQL_API_URL, _oneZeroQueries.GET_MOVEMENTS, {
        portfolioId: portfolio.portfolioId,
        accountId: account.accountId,
        language: 'HEBREW',
        pagination: {
          cursor,
          limit: 50
        }
      }, {
        authorization: `Bearer ${this.accessToken}`
      });
      movements.unshift(...newMovements);
      cursor = pagination.cursor;
      if (!pagination.hasMore) {
        break;
      }
    }
    movements.sort((x, y) => new Date(x.movementTimestamp).valueOf() - new Date(y.movementTimestamp).valueOf());
    const matchingMovements = movements.filter(movement => new Date(movement.movementTimestamp) >= startDate);
    return {
      accountNumber: portfolio.portfolioNum,
      balance: !movements.length ? 0 : parseFloat(movements[movements.length - 1].runningBalance),
      txns: matchingMovements.map(movement => {
        var _movement$transaction;
        const hasInstallments = (_movement$transaction = movement.transaction) === null || _movement$transaction === void 0 || (_movement$transaction = _movement$transaction.enrichment) === null || _movement$transaction === void 0 || (_movement$transaction = _movement$transaction.recurrences) === null || _movement$transaction === void 0 ? void 0 : _movement$transaction.some(x => x.isRecurrent);
        const modifier = movement.creditDebit === 'DEBIT' ? -1 : 1;
        return {
          identifier: movement.movementId,
          date: movement.valueDate,
          chargedAmount: +movement.movementAmount * modifier,
          chargedCurrency: movement.movementCurrency,
          originalAmount: +movement.movementAmount * modifier,
          originalCurrency: movement.movementCurrency,
          description: this.sanitizeHebrew(movement.description),
          processedDate: movement.movementTimestamp,
          status: _transactions.TransactionStatuses.Completed,
          type: hasInstallments ? _transactions.TransactionTypes.Installments : _transactions.TransactionTypes.Normal
        };
      })
    };
  }

  /**
   * one zero hebrew strings are reversed with a unicode control character that forces display in LTR order
   * We need to remove the unicode control character, and then reverse hebrew substrings inside the string
   */
  sanitizeHebrew(text) {
    if (!text.includes('\u202d')) {
      return text.trim();
    }
    const plainString = text.replace(/\u202d/gi, '').trim();
    const hebrewSubStringsRanges = [...plainString.matchAll(HEBREW_WORDS_REGEX)];
    const rangesToReverse = hebrewSubStringsRanges.map(str => ({
      start: str.index,
      end: str.index + str[0].length
    }));
    const out = [];
    let index = 0;
    for (const {
      start,
      end
    } of rangesToReverse) {
      out.push(...plainString.substring(index, start));
      index += start - index;
      const reversed = [...plainString.substring(start, end)].reverse();
      out.push(...reversed);
      index += end - start;
    }
    out.push(...plainString.substring(index, plainString.length));
    return out.join('');
  }
  async fetchData() {
    if (!this.accessToken) {
      return (0, _errors.createGenericError)('login() was not called');
    }
    const defaultStartMoment = (0, _moment.default)().subtract(1, 'years').add(1, 'day');
    const startDate = this.options.startDate || defaultStartMoment.toDate();
    const startMoment = _moment.default.max(defaultStartMoment, (0, _moment.default)(startDate));
    debug('Fetching account list');
    const result = await (0, _fetch.fetchGraphql)(GRAPHQL_API_URL, _oneZeroQueries.GET_CUSTOMER, {}, {
      authorization: `Bearer ${this.accessToken}`
    });
    const portfolios = result.customer.flatMap(customer => customer.portfolios || []);
    return {
      success: true,
      accounts: await Promise.all(portfolios.map(portfolio => this.fetchPortfolioMovements(portfolio, startMoment.toDate())))
    };
  }
}
exports.default = OneZeroScraper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,