"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createScraper;
var _assertNever = require("../assertNever");
var _definitions = require("../definitions");
var _amex = _interopRequireDefault(require("./amex"));
var _behatsdaa = _interopRequireDefault(require("./behatsdaa"));
var _beinleumi = _interopRequireDefault(require("./beinleumi"));
var _beyahadBishvilha = _interopRequireDefault(require("./beyahad-bishvilha"));
var _discount = _interopRequireDefault(require("./discount"));
var _hapoalim = _interopRequireDefault(require("./hapoalim"));
var _isracard = _interopRequireDefault(require("./isracard"));
var _leumi = _interopRequireDefault(require("./leumi"));
var _massad = _interopRequireDefault(require("./massad"));
var _max = _interopRequireDefault(require("./max"));
var _mercantile = _interopRequireDefault(require("./mercantile"));
var _mizrahi = _interopRequireDefault(require("./mizrahi"));
var _oneZero = _interopRequireDefault(require("./one-zero"));
var _otsarHahayal = _interopRequireDefault(require("./otsar-hahayal"));
var _pagi = _interopRequireDefault(require("./pagi"));
var _unionBank = _interopRequireDefault(require("./union-bank"));
var _visaCal = _interopRequireDefault(require("./visa-cal"));
var _yahav = _interopRequireDefault(require("./yahav"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function createScraper(options) {
  switch (options.companyId) {
    case _definitions.CompanyTypes.hapoalim:
      return new _hapoalim.default(options);
    case _definitions.CompanyTypes.hapoalimBeOnline:
      // eslint-disable-next-line no-console
      console.warn("hapoalimBeOnline is deprecated, use 'hapoalim' instead");
      return new _hapoalim.default(options);
    case _definitions.CompanyTypes.leumi:
      return new _leumi.default(options);
    case _definitions.CompanyTypes.beyahadBishvilha:
      return new _beyahadBishvilha.default(options);
    case _definitions.CompanyTypes.mizrahi:
      return new _mizrahi.default(options);
    case _definitions.CompanyTypes.discount:
      return new _discount.default(options);
    case _definitions.CompanyTypes.mercantile:
      return new _mercantile.default(options);
    case _definitions.CompanyTypes.otsarHahayal:
      return new _otsarHahayal.default(options);
    case _definitions.CompanyTypes.visaCal:
      return new _visaCal.default(options);
    case _definitions.CompanyTypes.leumiCard:
      // eslint-disable-next-line no-console
      console.warn("leumiCard is deprecated, use 'max' instead");
      return new _max.default(options);
    case _definitions.CompanyTypes.max:
      return new _max.default(options);
    case _definitions.CompanyTypes.isracard:
      return new _isracard.default(options);
    case _definitions.CompanyTypes.amex:
      return new _amex.default(options);
    case _definitions.CompanyTypes.union:
      return new _unionBank.default(options);
    case _definitions.CompanyTypes.beinleumi:
      return new _beinleumi.default(options);
    case _definitions.CompanyTypes.massad:
      return new _massad.default(options);
    case _definitions.CompanyTypes.yahav:
      return new _yahav.default(options);
    case _definitions.CompanyTypes.oneZero:
      return new _oneZero.default(options);
    case _definitions.CompanyTypes.behatsdaa:
      return new _behatsdaa.default(options);
    case _definitions.CompanyTypes.pagi:
      return new _pagi.default(options);
    default:
      return (0, _assertNever.assertNever)(options.companyId, `unknown company id ${options.companyId}`);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,